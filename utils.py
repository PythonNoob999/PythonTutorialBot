from pyrogram.types import (
InlineKeyboardMarkup as Markup,
InlineKeyboardButton as Button,
ReplyKeyboardMarkup as RMarkup
)

BACK = Button("‚Ü©Ô∏èBack", callback_data="back")

msg = {
"template-ar": '''
**‚Ä¢‚Ä¢{}‚Ä¢‚Ä¢**

**‚Ä¢ÿ™ÿπÿ±ŸäŸÅ ÿ®ÿ≥Ÿäÿ∑üí¨‚Ä¢**
**{}**

**‚Ä¢ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑŸÉÿ™ÿßÿ®ÿ©‚å®Ô∏è‚Ä¢**
`{}`

**‚Ä¢ŸÖÿ´ÿßŸÑ ŸÑŸÑÿßÿ≥ÿ™ÿπŸÖÿßŸÑ‚ùì‚Ä¢**
**{}**

**ŸÖÿ´ÿßŸÑüìü:**
`{}`
''',
"template-en": '''
**‚Ä¢‚Ä¢{}‚Ä¢‚Ä¢**

**‚Ä¢Short Description üí¨‚Ä¢**
**{}**

**‚Ä¢Syntax‚å®Ô∏è‚Ä¢**
`{}`

**‚Ä¢Usage Example‚ùì‚Ä¢**
**{}**

**Exampleüìü:**
`{}`
''',
"start-en": """
Welcome in your **Journey Helper** for learning pythonüóÇ

you can start exploring by pressing one of those **Buttons** under the message
""",
"start-ar": """
ÿßŸáŸÑÿß ÿ®ŸÉ ŸÅŸä **ŸÖÿ≥ÿßÿπÿØŸÉ ŸÅŸä ÿßŸÑÿ±ÿ≠ŸÑÿ©** ŸÑÿ™ÿπŸÑŸÖ ÿßŸÑÿ®ÿßŸäÿ´ŸàŸÜ

ŸÑÿ™ÿ®ÿØÿ£ ÿßŸÑÿ™ÿπŸÑŸÖ ŸÇŸÖ ÿ®ÿ∂ÿ∫ÿ∑ **ÿ≤ÿ±** ŸÖŸÜ ÿßŸÑÿßÿ≤ÿ±ÿßÿ± ÿßŸÑÿßÿ™Ÿäÿ©
""",
"variables-en": '''
‚Ä¢‚Ä¢**Variablesüìí**‚Ä¢‚Ä¢

**‚Ä¢Short Descriptionüí¨‚Ä¢**
**Variables serve as a container**, They can contain aka "store" values inside of them

**‚Ä¢Syntax‚å®Ô∏è‚Ä¢**
`variable_name = DataType`

**‚Ä¢Usage Example‚ùì‚Ä¢**
**We can use variables to store values inside of them to use it later on**

**Exampleüìü:**
`number = 5
print(number*2)
>> 10`
''',
"variables-ar": '''
**‚Ä¢‚Ä¢ÿßŸÑŸÖÿ™ÿ∫Ÿäÿ±ÿßÿ™üìí‚Ä¢‚Ä¢**

**‚Ä¢ÿ™ÿπÿ±ŸäŸÅ ÿ®ÿ≥Ÿäÿ∑üí¨‚Ä¢**
**ÿßŸÑŸÖÿ™ÿ∫Ÿäÿ±ÿßÿ™ ÿ™ÿ™ÿµÿ±ŸÅ ŸÉÿ≠ÿßŸàŸäÿßÿ™**, ÿ™ÿ≥ÿ™ÿ∑Ÿäÿπ ÿ™ÿÆÿ≤ŸäŸÜ ÿ¨ŸÖŸäÿπ ÿßŸÜŸàÿßÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿØÿßÿÆŸÑ ÿßŸÑŸÖÿ™ÿ∫Ÿäÿ±ÿßÿ™

**‚Ä¢ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑŸÉÿ™ÿßÿ®ÿ©‚å®Ô∏è‚Ä¢**
`# ÿßÿ≥ŸÖ ÿßŸÑŸÖÿ™ÿ∫Ÿäÿ± = ÿßŸä ŸÜŸàÿπ ÿ®ŸäÿßŸÜÿßÿ™
variable_name = DataType`

**‚Ä¢ŸÖÿ´ÿßŸÑ ŸÑŸÑÿßÿ≥ÿ™ÿπŸÖÿßŸÑ‚ùì‚Ä¢**
**ŸÜÿ≥ÿ™ÿ∑Ÿäÿπ ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑŸÖÿ™ÿ∫Ÿäÿ±ÿßÿ™ ŸÑÿ™ÿÆÿ≤ŸäŸäŸÜ ŸÇŸäŸÖ ÿ®ÿØÿßÿÆŸÑŸáÿß ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖŸáÿß ŸÅŸä ŸàŸÇÿ™ÿ¢ ŸÑÿßÿ≠ŸÇ**

**ŸÖÿ´ÿßŸÑüìü:**
`# ŸáŸÜÿß ŸÜŸÇŸàŸÖ ÿ®ÿπŸÖŸÑ ŸÖÿ™ÿ∫Ÿäÿ± ÿ® ŸÇŸäŸÖÿ© 5 Ÿà ÿ∑ÿ®ÿßÿπÿ™Ÿá x 2
number = 5
print(number*2)
>> 10`
''',
"data_types-ar": "ŸÇŸÖ ÿ®ÿ£ÿÆÿ™Ÿäÿßÿ± ŸÜŸàÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™",
"data_types-en": "Choose DataType",
"data_types-str-ar": '''
**‚Ä¢‚Ä¢ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÜÿµŸäÿ© str‚Ä¢‚Ä¢**

**‚Ä¢ÿ™ÿπÿ±ŸäŸÅ ÿ®ÿ≥Ÿäÿ∑üí¨‚Ä¢**
**ŸÜŸàÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ str ŸáŸà ŸÜŸàÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ "ÿßŸÑŸÜÿµŸäÿ©" ÿ™ÿ≥ÿ™ÿÆÿØŸÖ ŸÅŸä ÿπŸÖŸÑŸäÿßÿ™ ŸÉÿ´Ÿäÿ±ÿ© Ÿà ÿßÿ∫ŸÑÿ® ÿßÿ≥ÿ™ÿÆÿØÿßŸÖÿ™Ÿáÿß ŸÑŸÑÿ™ŸàÿßÿµŸÑ ŸÖÿπ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ**

‚Ä¢ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑŸÉÿ™ÿßÿ®ÿ©‚å®Ô∏è‚Ä¢
`# ŸáŸÜÿß ŸÜŸÇŸàŸÖ ÿ®ÿ∑ÿ®ÿßÿπÿ© ÿ¨ŸÖŸÑÿ© Hello World! ŸÅŸä ÿßŸÑÿ¥ÿßÿ¥ÿ© ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÖÿ± ÿßŸÑÿ∑ÿ®ÿßÿπÿ©

print("Hello World!")
`

**‚Ä¢ŸÖÿ´ÿßŸÑ ŸÑŸÑÿßÿ≥ÿ™ÿπŸÖÿßŸÑ‚ùì‚Ä¢**
**ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÜÿµŸäÿ© ÿ™ÿØÿÆŸÑ ŸÅŸä ŸÉÿ´Ÿäÿ± ŸÖŸÜ ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖÿßÿ™ÿå ŸÖÿ´ŸÑ ÿ∑ÿ®ÿßÿπÿ© ŸÉŸÑŸÖÿßÿ™ ŸÅŸä ÿßŸÑÿ¥ÿßÿ¥ÿ©ÿå ÿ™ÿÆÿ≤ŸäŸÜ ŸÖÿπŸÑŸàŸÖÿßÿ™ ŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÉ ÿßŸÑÿßÿ≥ŸÖ Ÿà ÿßŸÑÿ®ÿßÿ≥Ÿàÿ±ÿØ**

**ŸÖÿ´ÿßŸÑüìü:**
`
user_name = "Ahmed"
password = "12345abc"
`
''',
"data_types-str-en": '''
**‚Ä¢‚Ä¢String data type‚Ä¢‚Ä¢**

**‚Ä¢Short descriptionüí¨‚Ä¢**
**String can be used to refer to a "text" value**

**‚Ä¢Syntax‚å®Ô∏è‚Ä¢**
`print("Hello World!")`

**‚Ä¢Usage Example‚ùì‚Ä¢**
**We can use strings to store a user name and password**

**Exampleüìü:**
`
user_name = "Jack"
password = "12345abc"
`
''',
"data_types-int-ar": '''
**‚Ä¢‚Ä¢ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ±ŸÇŸÖŸäÿ© Int‚Ä¢‚Ä¢**

**‚Ä¢ÿ™ÿπÿ±ŸäŸÅ ÿ®ÿ≥Ÿäÿ∑üí¨‚Ä¢**
**ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ±ŸÇŸÖŸäÿ© int ÿ™ÿ≥ÿ™ÿÆÿØŸÖ ŸÅŸä ÿßÿ∫ŸÑÿ® ÿßŸÑÿßŸàŸÇÿßÿ™ÿå ŸÅ ÿ™ÿÆÿ≤ŸäŸÜ ÿ®ŸäÿßŸÜÿßÿ™/ÿßÿ¨ÿ±ÿßÿ° ÿπŸÖŸÑŸäÿßÿ™ ÿ≠ÿ≥ÿßÿ®Ÿäÿ©/ÿßŸÜÿ¥ÿßÿ° ÿÆŸàÿ±ÿßÿ≤ŸÖŸäÿßÿ™ ÿßŸÑÿ™ÿ¥ŸÅŸäÿ±**

**‚Ä¢ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑŸÉÿ™ÿßÿ®ÿ©‚å®Ô∏è‚Ä¢**
`intvar = 10`

**‚Ä¢ŸÖÿ´ÿßŸÑ ŸÑŸÑÿßÿ≥ÿ™ÿπŸÖÿßŸÑ‚ùì‚Ä¢**
**ŸäŸÖŸÉŸÜ ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ±ŸÇŸÖŸäÿ© ŸÑŸÖÿπÿ±ŸÅÿ© ÿ≤ÿßŸàŸäÿ© ŸÜÿßŸÇÿµÿ© ŸÅŸä ŸÖÿ´ŸÑÿ´**

**ŸÖÿ´ÿßŸÑüìü:**
`# ŸÜŸÇŸàŸÖ ÿ®ÿπŸÖŸÑ ŸÖÿ™ÿ∫Ÿäÿ±ŸäŸÜ ŸÅŸäŸáŸÖ ÿßŸàŸÑ ÿ≤ÿßŸàŸäÿ™ŸäŸÜ
Angle1 = 70
Angle2 = 80
# ŸÜŸÇŸàŸÖ ÿ®ÿ¨ŸÖÿπ ÿßŸÑŸÖÿ™ÿ∫Ÿäÿ±ŸäŸÜ Ÿà ŸÜÿ∑ÿ±ÿ≠ŸáŸÖ ŸÖŸÜ 180
print("Third angle is ", (Angle1+Angle2)-180, " Degrees¬∞")`
>> Third angle is 30 Degrees¬∞
''',
"data_types-int-en": '''
**‚Ä¢‚Ä¢Int Data Type‚Ä¢‚Ä¢**

**‚Ä¢Short Description üí¨‚Ä¢**
**Int refers to numerical data, can be used in data_science/hashing algorithms/data analyst**

**‚Ä¢Syntax‚å®Ô∏è‚Ä¢**
`intvar = 10`

**‚Ä¢Usage Example‚ùì‚Ä¢**
**We can use INT to calculate the missing angle of a triangle**


**Exampleüìü:**
`Angle1 = 80
Angle2 = 70
print("Third angle is ", (Angle1+Angle2)-180, " Degrees¬∞")`
>> Third angle is 30 Degrees¬∞
''',
"data_types-float-ar": '''
**‚Ä¢‚Ä¢ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿπÿ¥ÿ±Ÿäÿ© Float‚Ä¢‚Ä¢**

**‚Ä¢ÿ™ÿπÿ±ŸäŸÅ ÿ®ÿ≥Ÿäÿ∑üí¨‚Ä¢**
**ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿπÿ¥ÿ±Ÿäÿ© Float ŸáŸä ÿ™ÿ±ŸÖÿ≤ ŸÑŸÑÿßÿπÿØÿßÿØ ÿßŸÑŸÑÿ™Ÿä ÿ®Ÿáÿß ÿßÿ±ŸÇÿßŸÖ ÿπÿ¥ÿ±Ÿäÿ©ÿå ÿ™ÿ≥ÿ™ÿÆÿØŸÖ ŸÅŸä ÿßŸÑÿπŸÖŸÑŸäÿßÿ™ ÿßŸÑÿ™Ÿä ÿ™ÿ≠ÿ™ÿßÿ¨ ÿØŸÇÿ© ŸÉÿ®Ÿäÿ±ÿ© ŸÑŸÑÿ∫ÿßŸäÿ©**

**‚Ä¢ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑŸÉÿ™ÿßÿ®ÿ©‚å®Ô∏è‚Ä¢**
`Floatvar = 1.532`

**‚Ä¢ŸÖÿ´ÿßŸÑ ŸÑŸÑÿßÿ≥ÿ™ÿπŸÖÿßŸÑ‚ùì‚Ä¢**
**ŸäŸÖŸÉŸÜŸÜÿß ÿ≠ÿ≥ÿßÿ®ÿ© ŸÖÿ§ÿ¥ÿ± ŸÉÿ™ŸÑÿ© ÿßŸÑÿ¨ÿ≥ŸÖ (BMI) ÿ®ÿØŸÇÿ© ŸÉÿ®Ÿäÿ±ÿ©**

**ŸÖÿ´ÿßŸÑüìü:**
`# ŸÜŸÇŸàŸÖ ÿ®ÿ™ÿπÿ±ŸäŸÅ ŸÖÿ™ÿ∫Ÿäÿ±ŸäŸÜ ŸÅŸäŸáŸÖ ÿßŸÑŸàÿ≤ŸÜ Ÿà ÿßŸÑÿ∑ŸàŸÑ

height = 5.9
weight = 160.74

# ŸÜŸÇŸàŸÖ ÿ®ÿ≠ÿ≥ÿßÿ®ÿ© ŸÖÿ§ÿ¥ÿ± ŸÉÿ™ŸÑÿ© ÿßŸÑÿ¨ÿ≥ŸÖ (BMI)
bmi = weight / (height**2)
 
# ŸÜŸÇŸàŸÖ ÿ®ÿ∑ÿ®ÿßÿπÿ© ŸÖÿ§ÿ¥ÿ± ŸÉÿ™ŸÑÿ© ÿßŸÑÿ¨ÿ≥ŸÖ (BMI)
print("Your bmi is ", bmi)
>> Your bmi is 4.61763861`
''',
"data_types-float-en": '''
**‚Ä¢‚Ä¢Float Data Type‚Ä¢‚Ä¢**

**‚Ä¢Short Description üí¨‚Ä¢**
**Float is a Double numerical data type, it's used in Micro operations and calculation that need to be specific**

**‚Ä¢Syntax‚å®Ô∏è‚Ä¢**
`Floatvar = 1.532`

**‚Ä¢Usage Example‚ùì‚Ä¢**
**It can be used to calculate the body BMI accurately**

**Exampleüìü:**
`# We declare height & weight in float variables

height = 5.9
weight = 160.74

# we calculate the BMI
bmi = weight / (height**2)
 
# now we print the bmi
print("Your bmi is ", bmi)
>> Your bmi is 4.61763861`
''',
"data_types-bool-ar": '''
**‚Ä¢‚Ä¢ÿßŸÑŸÖŸÜÿ∑ŸÇŸäÿ© Boolean‚Ä¢‚Ä¢**

**‚Ä¢ÿ™ÿπÿ±ŸäŸÅ ÿ®ÿ≥Ÿäÿ∑üí¨‚Ä¢**
**ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖŸÜÿ∑ŸÇŸäÿ© Booleanÿå Ÿà ÿßŸÑŸÑÿ∞Ÿä ŸáŸä ÿπÿ®ÿßÿ±ÿ© ÿπŸÜ True, False ÿßŸà ÿµÿ≠Ÿäÿ≠ Ÿà ÿÆÿ∑ÿ£ÿå Ÿà ŸáŸä ÿ™ÿ±ŸÖÿ≤ ŸÑ ŸÇŸäŸÖÿ© ÿµÿ≠Ÿäÿ≠ÿ© 1 ÿßŸà ÿÆÿßÿ∑ÿ¶ÿ© 0**

**‚Ä¢ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑŸÉÿ™ÿßÿ®ÿ©‚å®Ô∏è‚Ä¢**
`Boolvar = True`

**‚Ä¢ŸÖÿ´ÿßŸÑ ŸÑŸÑÿßÿ≥ÿ™ÿπŸÖÿßŸÑ‚ùì‚Ä¢**
**ÿ≥ŸÜŸÇŸàŸÖ ÿ®ÿπŸÖŸÑ ŸÖÿ™ÿ∫Ÿäÿ±ŸäŸÜ ÿ±ŸÇŸÖŸäŸäŸÜÿå Ÿà ÿ≥ŸÜÿ™ÿ£ŸÉÿØ ÿßŸÜ ÿßŸÑÿ±ŸÇŸÖŸäŸÜ ŸÖÿ∑ÿßÿ®ŸÇŸäŸÜ ŸÑÿ®ÿßÿ≥Ÿàÿ±ÿØ ŸÖÿπŸäŸÜÿå Ÿà ÿßŸÜ ŸÉÿßŸÜŸà ŸÖÿ™ÿ∑ÿßÿ®ŸÇŸäŸÜÿå ÿ≥ŸÜÿ∫Ÿäÿ± ŸÇŸäŸÖÿ© ÿßŸÑŸÖÿ™ÿ∫Ÿäÿ± ÿßŸÑŸÑÿ™Ÿä ŸÅŸäŸáÿß ÿßŸÑŸÜÿ™Ÿäÿ¨Ÿá ÿßŸÑŸä Trueÿå ÿ™ÿπŸÜŸä ÿµÿ≠Ÿäÿ≠ÿ©ÿå ÿßŸà Falseÿå ŸäÿπŸÜŸä ÿÆÿßÿ∑ÿ¶ÿ© ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿßŸÑÿ®ÿßÿ≥Ÿàÿ±ÿØ ÿ∫Ÿäÿ± ŸÖÿ™ÿ∑ÿßÿ®ŸÇ**

**ŸÖÿ´ÿßŸÑüìü:**
`# ŸÜŸÇŸàŸÖ ÿ®ÿπŸÖŸÑ ÿßŸÑŸÖÿ™ÿ∫ŸäŸäÿ±ŸäŸÜ
password1 = 12345
password2 = 12344

# ŸÜŸÇŸàŸÖ ÿ®ÿπŸÖŸÑ ŸÖÿ™ÿ∫Ÿäÿ± ŸÅŸäŸá ŸÉŸÑŸÖÿ© ÿßŸÑÿ≥ÿ± ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©
password = 12345
# ŸÜŸÇŸàŸÖ ÿ®ÿπŸÖŸÑ ŸÖÿ™ÿ∫Ÿäÿ± ŸÅŸäŸá ÿ≠ÿßŸÑÿ© ÿßŸÑÿØÿÆŸàŸÑ ÿßŸÑŸÜÿßÿ¨ÿ≠
access = False

# ŸÜÿ∑ÿßÿ®ŸÇ ÿßŸÑŸÖÿ™ÿ∫Ÿäÿ± ÿßŸÑÿßŸàŸÑ
if password1 == password:
    access = True

print(access) 
>> True

# ŸÜÿ∑ÿßÿ®ŸÇ ÿßŸÑŸÖÿ™ÿ∫Ÿäÿ± ÿßŸÑÿ™ÿßŸÜŸä

if password2 == password:
    access = False

print(access)
>> False`
''',
"data_types-bool-en": '''
**‚Ä¢‚Ä¢Boolean Data Type‚Ä¢‚Ä¢**

**‚Ä¢Short Description üí¨‚Ä¢**
**Boolean data types can either represent True or False, aka 1 or 0**

**‚Ä¢Syntax‚å®Ô∏è‚Ä¢**
`Boolvar = True`

**‚Ä¢Usage Example‚ùì‚Ä¢**
**We can make 2 int vars that have 2 passwords, and match it with the correct password, and make a result var and change it to True, if the var is identical to the password else we will but a default value to False**

**Exampleüìü:**
`# we make the 2 passwords vars
password1 = 12345
password2 = 12344

# we make a var for the main password
password = 12345

# we make a Boolean var to store the access status

access = False

# We match the first password
if password1 == password:
    access = True

print(access) 
>> True

# We match the second password

if password2 == password:
    access = False

print(access)
>> False`
''',
"data_types-list-en": '''
**‚Ä¢‚Ä¢Array/List []‚Ä¢‚Ä¢**

**‚Ä¢Short Description üí¨‚Ä¢**
**Arrays aka Lists in python can be used to store multiple value's inside of it, it can store all data types also**

**‚Ä¢Syntax‚å®Ô∏è‚Ä¢**
`Listvar = [1, "1", 1.5, False]`

**‚Ä¢Usage Example‚ùì‚Ä¢**
**We can use lists to store fruits, and printing them by the "index"**

**Exampleüìü:**
`fruits = ["Apple", "Kiwi", "Banana"]
# indexing starts at 0 in most programming languages

print(fruits[0])
>> Apple

# you can also use negative indexes, wich will give you opposite result

print(fruits[-1]) # last item
>> Banana

print(fruits[-2]) # the item before the last one

>> Kiwi
fruits[0] = "Orange" # we can even change it's values
print(fruits)
>> ["Orange", "Kiwi", "Banana"]`
''',
"data_types-list-ar": '''
**‚Ä¢‚Ä¢ÿßŸÑŸÇŸàÿßÿ¶ŸÖ []‚Ä¢‚Ä¢**

**‚Ä¢ÿ™ÿπÿ±ŸäŸÅ ÿ®ÿ≥Ÿäÿ∑üí¨‚Ä¢**
**ŸÜÿ≥ÿ™ÿ∑Ÿäÿπ ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑŸÇŸàÿßÿ¶ŸÖ ŸÑÿ™ÿÆÿ≤ŸäŸÜ ÿßŸä ŸÜŸàÿπ ÿ®ŸäÿßŸÜÿßÿ™ ÿØÿßÿÆŸÑŸáÿß Ÿà ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜŸáŸÖ ÿπŸÜ ÿ∑ÿ±ŸäŸÇ ÿ±ŸÇŸÖ ÿßŸÑŸÖŸÉÿßŸÜ**

**‚Ä¢ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑŸÉÿ™ÿßÿ®ÿ©‚å®Ô∏è‚Ä¢**
`Listvar = [1, "Hello", 1.232, False]`

**‚Ä¢ŸÖÿ´ÿßŸÑ ŸÑŸÑÿßÿ≥ÿ™ÿπŸÖÿßŸÑ‚ùì‚Ä¢**
**ŸÜÿ≥ÿ™ÿ∑Ÿäÿπ ÿ™ÿÆÿ≤ŸäŸÜ ŸÇÿßÿ¶ŸÖÿ© ŸÖŸÜ ÿßŸÑŸÅŸàÿßŸÉŸá Ÿà ÿ∑ÿ®ÿßÿπÿ™ŸáŸÖ ÿ® ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿ±ŸÇŸÖ ÿßŸÑŸÖŸÉÿßŸÜ**

**ŸÖÿ´ÿßŸÑüìü:**
`fruits = ["Apple", "Kiwi", "Banana"]
# ÿ±ŸÇŸÖ ÿßŸÑŸÖŸÉÿßŸÜ Ÿäÿ®ÿØÿß ÿ® 0 ŸÅŸä ÿßÿ∫ŸÑÿ® ÿßŸÑŸÑÿ∫ÿßÿ™ ÿßŸÑÿ®ÿ±ŸÖÿ¨Ÿäÿ©

print(fruits[0])
>> Apple

# ŸäŸÖŸÉŸÜŸÉ ÿßŸäÿ∂ÿß ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ŸÇŸäŸÖ ÿ≥ÿßŸÑÿ®ÿ© Ÿà ÿßŸÑŸÑÿ™Ÿä ÿ≥ÿ™ÿπÿ∑ŸäŸÉ ŸÜÿ™ÿßÿ¶ÿ¨ ŸÖÿÆÿ™ŸÑŸÅÿ©

print(fruits[-1]) # ÿßÿÆÿ± ŸÖŸÉÿßŸÜ
>> Banana

print(fruits[-2]) # ÿßŸÑŸÖŸÉÿßŸÜ ŸÖÿß ŸÇÿ®ŸÑ ÿßŸÑÿßÿÆŸäÿ±

>> Kiwi
fruits[0] = "Orange" # ŸÜÿ≥ÿ™ÿ∑Ÿäÿπ ÿßŸäÿ∂ÿß ÿ™ÿ∫Ÿäÿ± ŸÇŸäŸÖÿ© ŸÖÿπŸäŸÜÿ© ŸÅŸä ÿßŸÑŸÇÿßÿ¶ŸÖÿ©
print(fruits)
>> ["Orange", "Kiwi", "Banana"]`
''',
"data_types-tuple-en": '''
**‚Ä¢‚Ä¢Tuples ()‚Ä¢‚Ä¢**

**‚Ä¢Short Description üí¨‚Ä¢**
**Tuples is similar to lists it's also used to store value's, but it's IMMUTABLE, that means you can't change it's values**

**‚Ä¢Syntax‚å®Ô∏è‚Ä¢**
`Tuplevar = (1, "Hello", 1.343, False)`

**‚Ä¢Usage Example‚ùì‚Ä¢**
**We also can use the tuples like the lists, but this time we are dealing with unchangeable data!**

**Exampleüìü:**
`# Creating a tuple with fruits
fruits = ("Apple", "Kiwi", "Banana")

# we can also print it's values with indexing

print(fruits[0])
>> Apple

# and also use negative indexing
print(fruits[-1]) 
>> Banana

# but unlike lists[], you can't change it's data

fruits[0] = "Orange"
>> TypeError: "str" object does not support item assignment‚ùóÔ∏è`
''',
"data_types-tuple-ar": '''
**‚Ä¢‚Ä¢ÿßŸÑŸÖÿ™ÿ±ÿßÿ®ÿ∑ÿ© ()‚Ä¢‚Ä¢**

**‚Ä¢ÿ™ÿπÿ±ŸäŸÅ ÿ®ÿ≥Ÿäÿ∑üí¨‚Ä¢**
**ŸÜŸàÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ™ÿ±ÿßÿ®ÿ∑ÿ© ŸáŸä ŸÖÿ´ŸÑ ÿßŸÑŸÇŸàÿßÿ¶ŸÖÿå ŸÑŸÉŸÜ ÿπŸÉÿ≥ ÿßŸÑŸÇŸàÿßÿ¶ŸÖ ŸÑÿß ŸäŸÖŸÉŸÜŸÉ ÿ™ÿ∫ŸäŸäÿ± ŸÇŸäŸÖŸáÿß ÿßŸÑŸÖŸàÿ¨ŸàÿØÿ©**

**‚Ä¢ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑŸÉÿ™ÿßÿ®ÿ©‚å®Ô∏è‚Ä¢**
`Tuplevar = (1, "Hello", 1.243, False)`

**‚Ä¢ŸÖÿ´ÿßŸÑ ŸÑŸÑÿßÿ≥ÿ™ÿπŸÖÿßŸÑ‚ùì‚Ä¢**
**ŸÜÿ≥ÿ™ÿ∑Ÿäÿπ ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑŸÖÿ™ÿ±ÿßÿ®ÿ∑ÿßÿ™ ŸÖÿ´ŸÑ ÿßŸÑŸÇŸàÿßÿ¶ŸÖÿå ŸÑŸÉŸÜ Ÿáÿ∞Ÿá ÿßŸÑŸÖÿ±ÿ© ŸÑÿß ŸäŸÖŸÉŸÜŸÜÿß ÿ™ÿ∫Ÿäÿ± ŸÇŸäŸÖŸáÿß**

**ŸÖÿ´ÿßŸÑüìü:**
`# ŸÜÿµŸÜÿπ ŸÖÿ™ÿ±ÿßÿ®ÿ∑ÿ© ÿ®Ÿáÿß ÿßŸÑŸÇŸäŸÖ
fruits = ("Apple", "Kiwi", "Banana")

# ŸÜŸÇŸàŸÖ ÿ®ÿ∑ÿ®ÿßÿπÿ© ÿπŸÜÿßÿµÿ±Ÿáÿß ÿßŸäÿ∂ÿß ÿ® ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿ±ŸÇŸÖ ÿßŸÑŸÖŸÉÿßŸÜ

print(fruits[0])
>> Apple

# ÿßŸäÿ∂ÿß ŸÜÿ≥ÿ™ÿ∑Ÿäÿπ ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßÿ±ŸÇÿßŸÖ ÿ≥ÿßŸÑÿ®ÿ©
print(fruits[-1]) 
>> Banana

# ŸÑŸÉŸÜ ÿπŸÉÿ≥ ÿßŸÑŸÇŸàÿßÿ¶ŸÖÿå ÿ≥ŸÜÿ≠ÿµŸÑ ÿπŸÑŸä ÿÆŸÑŸÑ ÿπŸÜÿØ ÿ™ÿ∫Ÿäÿ± ŸÇŸäŸÖÿ© ÿ®ÿØÿßÿÆŸÑŸáÿß

fruits[0] = "Orange"
# ÿÆÿ∑ÿ£ÿå ŸÜŸàÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÜÿµŸäÿ© ŸÑÿßŸäÿØÿπŸÖ ÿ™ÿ®ÿßÿØŸÑ ÿßŸÑŸÇŸäŸÖ

>> TypeError: "str" object does not support item assignment‚ùóÔ∏è`
''',
"data_types-dict-en": '''
**‚Ä¢‚Ä¢Dictionary {}‚Ä¢‚Ä¢**

**‚Ä¢Short Description üí¨‚Ä¢**
**dictionary like list and tuple is used to store value's inside of them, but this you use key's instead of index to get a value from it!**

**‚Ä¢Syntax‚å®Ô∏è‚Ä¢**
`Dictvar = {
"key": "value", # key = value

"Bitcoin": "26500$", # bitcoin = 26500$

"Ahmed": {"age": 20}, # Ahmed = {"age": 20}

}`

**‚Ä¢Usage Example‚ùì‚Ä¢**
**We can use dictionary's to list a fruits and it's price per kilo**

**Exampleüìü:**
`# We make a price dictionary
fruits = {
"Apple": 3,
"Kiwi": 9,
"Banana": 4
}

# We can print fruit price by using it's name aka "key" as index

print(fruits["Kiwi"], "$")
>> 9$

# We can also change a fruit price
fruits["Banana"] = 2
print(fruits["Banana"], "$")
>> 2$

# And of course that well change the dictionary totally
print(fruits)
>> {
"Apple": 3,
"Kiwi": 9,
"Banana": 2
}`
''',
"data_types-dict-ar": '''
**‚Ä¢‚Ä¢Dictionary {}‚Ä¢‚Ä¢**

**‚Ä¢ÿ™ÿπÿ±ŸäŸÅ ÿ®ÿ≥Ÿäÿ∑üí¨‚Ä¢**
**ŸÜÿ≥ÿ™ÿ∑Ÿäÿπ ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑ dictionary ŸÑÿ™ÿÆÿ≤ŸäŸÜ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÖÿ´ŸÑ ÿßŸÑŸÇŸàÿßÿ¶ŸÖ Ÿà ÿßŸÑŸÖÿ™ÿ±ÿßÿ®ÿ∑ÿßÿ™ÿå ŸÑŸÉŸÜ Ÿáÿ∞Ÿá ÿßŸÑŸÖÿ±ÿ© ÿ≥ŸÜÿ≥ÿ™ÿÆÿØŸÖ ŸÜÿ∏ÿßŸÖ
 ŸÖŸÅÿ™ÿßÿ≠=ŸÇŸäŸÖÿ©
 ÿ®ÿØŸÑÿß ŸÖŸÜ
 ÿ±ŸÇŸÖ ÿßŸÑŸÖŸÉÿßŸÜ=ŸÇŸäŸÖÿ© 
ŸÑŸÜÿ≠ÿµŸÑ ÿπŸÑŸä ÿßŸÑŸÇŸäŸÖÿ© ŸÖŸÜŸáÿß!**

**‚Ä¢ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑŸÉÿ™ÿßÿ®ÿ©‚å®Ô∏è‚Ä¢**
`Dictvar = {
"ŸÖŸÅÿ™ÿßÿ≠": "ŸÇŸäŸÖÿ©", # ŸÖŸÅÿ™ÿßÿ≠=ŸÇŸäŸÖÿ©

"ÿ®Ÿäÿ™ŸÉŸàŸäŸÜ": "26500$", # ÿ®Ÿäÿ™ŸÉŸàŸäŸÜ= 26500$

"ÿßÿ≠ŸÖÿØ": {"ÿßŸÑÿπŸÖÿ±": 20} # ÿßÿ≠ŸÖÿØ = {"ÿßŸÑÿπŸÖÿ±": 20}

}`

**‚Ä¢ŸÖÿ´ÿßŸÑ ŸÑŸÑÿßÿ≥ÿ™ÿπŸÖÿßŸÑ‚ùì‚Ä¢**
**ŸÜÿ≥ÿ™ÿ∑Ÿäÿπ ÿ®ÿ™ÿÆÿ≤ŸäŸÜ ŸÇÿßÿ¶ŸÖÿ© ŸÖŸÜ ÿßÿ≥ÿπÿßÿ± ÿßŸÑŸÅŸàÿßŸÉŸá ÿ®ÿßŸÑŸÉŸäŸÑŸà ÿØÿßÿÆŸÑ dictionary**

**ŸÖÿ´ÿßŸÑüìü:**
`# ÿßŸàŸÑÿß ŸÜŸÇŸàŸÖ ÿ®ÿµŸÜÿßÿπÿ© ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿßÿ≥ÿπÿßÿ±
fruits = {
"ÿ™ŸÅÿßÿ≠": 3, # ÿ™ŸÅÿßÿ≠ = 3$
"ŸÉŸäŸàŸä": 9, # ŸÉŸäŸàŸä = 9$ 
"ŸÖŸàÿ≤": 4 # ŸÖŸàÿ≤ = 4$
}

# ÿßŸÑÿßŸÜ ÿ™ÿ≥ÿ™ÿ∑Ÿäÿπ ÿ∑ÿ®ÿßÿπÿ© ÿ≥ÿπÿ± ÿßŸÑŸÅÿßŸÉŸáÿ© ÿ® ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßÿ≥ŸÖŸáÿß ÿ®ÿØŸÑÿ¢ ŸÖŸÜ ÿ±ŸÇŸÖ ŸÖŸÉÿßŸÜŸáÿß ŸÅŸä ÿßŸÑŸÇÿßÿ¶ŸÖÿ©

print(fruits["ŸÉŸäŸàŸä"], "$")
>> 9$

# ÿ™ÿ≥ÿ™ÿ∑Ÿäÿπ ÿßŸäÿ∂ÿß ÿ™ÿ∫Ÿäÿ± ÿ≥ÿπÿ± ÿßŸÑŸÅÿßŸÉŸáÿ©!

fruits["ŸÖŸàÿ≤"] = 2
print(fruits["ŸÖŸàÿ≤"], "$")
>> 2$

# Ÿà Ÿáÿ∞ÿß ÿ∑ÿ®ÿπÿß ÿ≥ŸäŸÇŸàŸÖ ÿ®ÿ™ÿ∫ŸäŸäÿ± ÿßŸÑŸÇÿßÿ¶ŸÖÿ© ŸÉŸÑŸäÿß

print(fruits)
>> {
"ÿ™ŸÅÿßÿ≠": 3,
"ŸÉŸäŸàŸä": 9,
"ŸÖŸàÿ≤": 2
}`
'''
}

keyboards = {
"start-en": [
    [Button("variablesüíæ", callback_data="info-variables"), Button("Data Typesüìã", callback_data="data_types-en")],
    [Button("functionsüì†", callback_data="info-functions"), Button("loopsüíà", callback_data="info-loops")],
    [Button("if-elseüñã‚úíÔ∏è", callback_data="info-if_else"), Button("lambda‚ùì", callback_data="info-lambda")],
    [Button("Languageüí¨", callback_data="set_lang")]
],
"start-ar": [
    [Button("ÿßŸÑŸÖÿ™ÿ∫Ÿäÿ±ÿßÿ™üíæ", callback_data="info-variables"), Button("ÿßŸÜŸàÿßÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™üìã", callback_data="data_types-ar")],
    [Button("ÿßŸÑÿØŸàÿßŸÑüì†", callback_data="info-functions"), Button("ÿßŸÑÿ≠ŸÑŸÇÿßÿ™üíà", callback_data="info-loops")],
    [Button("if ÿßŸÑÿ¥ÿ±ÿ∑Ÿäÿ©üñã‚úíÔ∏è", callback_data="info-if_else"), Button("ÿßŸÑÿØÿßŸÑÿ© ŸÖÿ¨ŸáŸàŸÑÿ© ÿßŸÑŸáŸàŸäÿ©‚ùì", callback_data="info-lambda")],
    [Button("ÿßŸÑŸÑÿ∫ÿ©üí¨", callback_data="set_lang")]
],
"data_types-ar" : Markup([
    [Button("string ÿßŸÑŸÜÿµŸäÿ©üí¨", callback_data="data_types-str-ar"), Button("int ÿßŸÑÿ±ŸÇŸÖŸäÿ©üî¢", callback_data="data_types-int-ar"), Button("float ÿßŸÑÿπÿ¥ÿ±Ÿäÿ©üìü", callback_data="data_types-float-ar")], 
    [Button("bool ÿßŸÑŸÖŸÜÿ∑ŸÇŸäÿ©üß†", callback_data="data_types-bool-ar")],
    [Button("ÿßŸÑŸÇŸàÿßÿ¶ŸÖ []", callback_data="data_types-list-ar"), Button("ŸÖÿ™ÿ±ÿßÿ®ÿ∑ÿ© ()", callback_data="data_types-tuple-ar"), Button('dict {}', callback_data="data_types-dict-ar")],
    [BACK]
]),
"data_types-en": Markup([
    [Button("stringüí¨", callback_data="data_types-str-en"), Button("intüî¢", callback_data="data_types-int-en"), Button("floatüìü", callback_data="data_types-float-en"), Button("boolüß†", callback_data="data_types-bool-en")],
    [Button("array/list []", callback_data="data_types-list-en"), Button("tuple ()", callback_data="data_types-tuple-en"), Button('dict {}', callback_data="data_types-dict-en")],
    [BACK]
]),
"variables": Markup([[BACK]]),
"lang": RMarkup([
    ["Englishüá∫üá≤", "Arabicüá∏üá¶"]
], resize_keyboard=True, one_time_keyboard=True),
"back": Markup([[BACK]]),
"admin": Markup([
    [Button("Message generator‚öôÔ∏è", callback_data="make_a_message")]
])
}